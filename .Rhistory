ylab = "Turnover Volume Index (2010 = 100)")
lines(forecast_index, forecasts_original_scale_arma11, col = "red", lwd = 2, lty = 1)
lines(forecast_index, forecasts_original_scale_arma21, col = "blue", lwd = 2, lty = 2)
polygon(c(forecast_index, rev(forecast_index)),
c(lower_95_original_arma11, rev(upper_95_original_arma11)),
col = rgb(1, 0, 0, 0.2), border = NA)
polygon(c(forecast_index, rev(forecast_index)),
c(lower_95_original_arma21, rev(upper_95_original_arma21)),
col = rgb(0, 0, 1, 0.2), border = NA)
legend("topright",
legend = c("Original Data", "ARIMA(1,1) Forecast", "ARIMA(2,1) Forecast", "95% CI (ARIMA(1,1))", "95% CI (ARIMA(2,1))"),
col = c("black", "red", "blue", rgb(1, 0, 0, 0.2), rgb(0, 0, 1, 0.2)),
lty = c(1, 1, 2, NA, NA),
pch = c(NA, NA, NA, 15, 15), pt.cex = 1.2, bty = "n")
# Assuming your original data frame is 'insee_data' and the value column is 'value'
library(forecast)
# Use 'insee_data' consistently
n_total <- length(data$value)
n_test <- 12 # Hold out the last 12 months for testing
n_train <- n_total - n_test
train_data <- data$value[1:n_train]
test_data <- data$value[(n_train + 1):n_total]
# Fit ARIMA models to the training data using arima()
fit_arma11_train <- arima(train_data, order = c(1, 1, 1))
fit_arma21_train <- arima(train_data, order = c(2, 1, 1))
# Generate forecasts on the testing set using forecast()
forecast_arma11_test <- forecast(fit_arma11_train, h = n_test)
forecast_arma21_test <- forecast(fit_arma21_train, h = n_test)
# Function to calculate accuracy metrics
calculate_accuracy <- function(forecast_values, actual_values) {
n <- length(actual_values)
residuals <- as.numeric(forecast_values) - as.numeric(actual_values)
mse <- mean(residuals^2)
rmse <- sqrt(mse)
mae <- mean(abs(residuals))
mape <- mean(abs(residuals / actual_values)) * 100
me <- mean(residuals)
return(data.frame(
MSE = mse,
RMSE = rmse,
MAE = mae,
MAPE = mape,
ME = me
))
}
# Extract point forecasts as numeric vectors
forecasts_arma11 <- as.numeric(forecast_arma11_test$mean)
forecasts_arma21 <- as.numeric(forecast_arma21_test$mean)
# Ensure test_data is a numeric vector
test_data_numeric <- as.numeric(test_data)
# Calculate accuracy for ARIMA(1,1)
accuracy_arma11 <- calculate_accuracy(forecasts_arma11, test_data_numeric)
print("Accuracy of ARIMA(1,1) on Testing Set:")
print(accuracy_arma11)
# Calculate accuracy for ARIMA(2,1)
accuracy_arma21 <- calculate_accuracy(forecasts_arma21, test_data_numeric)
print("Accuracy of ARIMA(2,1) on Testing Set:")
print(accuracy_arma21)
n_total <- length(data$value)
n_test <- 12 # Hold out the last 12 months for testing
n_train <- n_total - n_test
train_data <- insee_data$value[1:n_train]
test_data <- data$value[(n_train + 1):n_total]
fit_arma11_train <- arima(train_data, order = c(1, 1, 1))
fit_arma21_train <- arima(train_data, order = c(2, 1, 1))
forecast_arma11_test <- forecast(fit_arma11_train, h = n_test)
forecast_arma21_test <- forecast(fit_arma21_train, h = n_test)
calculate_accuracy <- function(forecast_values, actual_values) {
n <- length(actual_values)
residuals <- as.numeric(forecast_values) - as.numeric(actual_values)
mse <- mean(residuals^2)
rmse <- sqrt(mse)
mae <- mean(abs(residuals))
mape <- mean(abs(residuals / actual_values)) * 100
me <- mean(residuals)
return(data.frame(
MSE = mse,
RMSE = rmse,
MAE = mae,
MAPE = mape,
ME = me
))
}
forecasts_arma11 <- as.numeric(forecast_arma11_test$mean)
forecasts_arma21 <- as.numeric(forecast_arma21_test$mean)
test_data_numeric <- as.numeric(coredata(test_data))
accuracy_arma11 <- calculate_accuracy(forecasts_arma11, test_data_numeric)
accuracy_arma21 <- calculate_accuracy(forecasts_arma21, test_data_numeric)
print("Accuracy of ARIMA(1,1) on Testing Set:")
print(accuracy_arma11)
print("Accuracy of ARIMA(2,1) on Testing Set:")
print(accuracy_arma21)
# FORCASTING
library(forecast)
par(mfrow = c(2, 1))  # 1 row, 2 columns
split_ratio <- 0.8
n <- nrow(data_diff)
train_size <- floor(split_ratio * n)
train_data <- data_diff$diff_value[1:train_size]
test_data  <- data_diff$diff_value[(train_size + 1):n]
fit_arma11 <- arima(train_data, order = c(1,0,1))
fit_arma21 <- arima(train_data, order = c(2,0,1))
h <- length(test_data)
forecast_arma11 <- forecast(fit_arma11, h = h)
forecast_arma21 <- forecast(fit_arma21, h = h)
# Define start point of forecast on the x-axis
forecast_start <- (train_size + 1):(train_size + h)
# Plot actual test data
plot(test_data, type = 'l', col = 'black', lwd = 2,
main = 'Forecast vs Actual (Differenced Data)',
ylab = 'diff_value', xlab = 'Time Index')
# Add forecast lines with correct x-index
lines(forecast_start, forecast_arma11$mean, col = 'red', lwd = 2)
lines(forecast_start, forecast_arma21$mean, col = 'blue', lwd = 2)
# Add legend
legend("topright", legend = c("Actual", "ARMA(1,1)", "ARMA(2,1)"),
col = c("black", "red", "blue"), lty = 1, lwd = 2)
print(forecast_arma11$mean)
print(length(forecast_arma11$mean))
print(length(test_data))
plot(1:length(test_data), test_data, type = 'l', col = 'black', lwd = 2,
main = 'Forecast vs Actual (Differenced Data)',
ylab = 'diff_value', xlab = 'Time Index')
lines(1:length(test_data), forecast_arma11$mean, col = 'red', lwd = 2)
lines(1:length(test_data), forecast_arma21$mean, col = 'blue', lwd = 2)
actual
# Assuming your data is a time series object (e.g., 'actual' is your time series data)
train <- window(ts_data, end = c(2014, 12))  # Train up to December 2014
test <- window(ts_data, start = c(2015, 1))  # Test from January 2015 onwards
# Fit an ARIMA model to the training data
fit <- auto.arima(train)
fit <- auto.arima(train, max.p=2, max.q=2, seasonal=FALSE,ic="bic", stepwise=TRUE,approximation=FALSE)  # or use your fit_arma11
summary(fit)
# Forecast the same number of periods as the test set length
forecast_vals <- forecast(fit, h = length(test))
# Plot the forecast with the actual values
plot(forecast_vals)
lines(test, col = 'blue')  # Add the test data to the plot for comparison
accuracy(forecast_vals, test)
fit <- arima(data_diff$diff_value, order = c(1, 0, 1))  # or use your fit_arma11
forecast_arma <- forecast(fit, h = 10)
plot(forecast_arma)
# Suppose your original last value (before differencing) was:
last_value <- tail(data$value, 1)
# Invert differencing for ARMA(1,1)
forecast_original_arma11 <- cumsum(forecast_arma11$mean) + last_value
# Plot it
plot(forecast_original_arma11, type = 'l', col = 'red', lwd = 2,
main = 'Forecasted Original Values (ARMA(1,1))', ylab = 'Original Value', xlab = 'Time')
# Forecast on test set horizon
h <- length(test_data)
fc <- forecast(fit_arma11, h = h)
# Compare with actual test data
accuracy(fc, test_data)
ts_data2 <- ts(data$value, start = c(1999, 2), frequency = 12)
# Step 1: Forecast for the next 3 months
h <- 3  # Forecast horizon = 3 months
fc <- forecast(fit_arma11, h = h)
# Step 2: Inverse differencing to get forecasted values in the original scale
# Assuming your last value from the original series is the last observed value.
last_original_value <- tail(ts_data2, 1)  # Last value of the original time series
forecasted_original <- last_original_value + cumsum(fc$mean)  # Forecast values on original scale
# Step 3: Extract actual values for the first 3 months from test_data (adjust accordingly)
# Example: Assuming the first 3 months in the test set are Jan, Feb, and Mar
actual_values <- test_data[1:3]  # Adjust if your test data is for different months
# Extracting forecasted values for Jan 2020, Feb 2020, and Mar 2020
forecast_dates <- seq(from = as.Date("2017-01-01"), by = "month", length.out = length(forecasted_original))
# Create a time series object with these dates
forecasted_original_ts <- ts(forecasted_original, start = c(2017, 1), frequency = 12)
forecasted_original_ts
# Now, let's extract the forecasted values for the 3 months in 2020
forecasted_2020 <- window(forecasted_original_ts, start = c(2020, 1), end = c(2020, 3))
actual_values <- window(ts_data, start = c(2020, 1), end = c(2020, 3))
ts_data2
print(actual_values)
print(actual_values)
# Create a data frame for easy visualization
forecast_results <- data.frame(
Month = c("Jan 2020", "Feb 2020", "Mar 2020"),
Predicted = forecasted_2020,
Actual = actual_values,
Error = actual_values - forecasted_2020
)
# Print the results
print(forecast_results)
# Load libraries
library(forecast)
library(ggplot2)
# Forecast next 24 months
forecast_arma21 <- forecast(fit_arma21, h = 12)
# Improved ggplot2-based forecast plot
autoplot(forecast_arma21) +
ggtitle("Forecast from ARMA(2,1) Model") +
xlab("Year") +
ylab("Differenced Series") +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5),
panel.grid.major = element_line(color = "gray80"),
panel.grid.minor = element_blank()
)
library(ggplot2)
library(forecast)
library(scales)
# Forecast next 24 months
forecast_arma21 <- forecast(fit_arma21, h = 10)
forecast_arma11 <- forecast(fit_arma11, h = 10)
# Enhanced forecast plot with both ARMA(2,1) and ARMA(1,1)
autoplot(forecast_arma21, series = "ARMA(2,1)") +
autolayer(forecast_arma11, series = "ARMA(1,1)") +
ggtitle("ðŸ“ˆ Forecast â€” ARMA(2,1) vs ARMA(1,1), Next 24 Months") +
xlab("Year") +
ylab("Differenced Time Series") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(labels = scales::number_format(accuracy = 0.01)) +
theme_minimal(base_family = "Helvetica", base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "gray20"),
panel.grid.major = element_line(color = "gray80", linetype = "dashed"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#fdfdfd", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA)
) +
geom_vline(xintercept = max(time(fitted(fit_arma21))), linetype = "dotted", color = "red") +
annotate("text",
x = max(time(fitted(fit_arma21))) + 0.5,
y = Inf, label = "Forecast Begins â†’",
vjust = 2, hjust = 0, color = "red", fontface = "italic", size = 4)
library(ggplot2)
library(forecast)
library(scales)
# Forecast next 24 months
forecast_arma21 <- forecast(fit_arma21, h = 24)
forecast_arma11 <- forecast(fit_arma11, h = 24)
# Prepare CI ribbon data for ARMA(2,1)
df_ci <- data.frame(
Time = as.numeric(time(forecast_arma21$mean)),
Lo95 = forecast_arma21$lower[, 2],
Hi95 = forecast_arma21$upper[, 2]
)
# Plot
autoplot(forecast_arma21, series = "ARMA(2,1)", PI = FALSE) +
autolayer(forecast_arma11, series = "ARMA(1,1)", PI = FALSE) +
autolayer(fitted(fit_arma21), series = "Actual", color = "blue") +
geom_ribbon(
data = df_ci,
aes(x = Time, ymin = Lo95, ymax = Hi95),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE
) +
ggtitle("ðŸ“ˆ Forecast â€” ARMA(2,1) vs ARMA(1,1), Next 24 Months") +
xlab("Year") +
ylab("Differenced Time Series") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
scale_color_manual(values = c("Actual" = "blue", "ARMA(2,1)" = "#E4572E", "ARMA(1,1)" = "#4C78A8")) +
theme_minimal(base_family = "Helvetica", base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "gray20"),
panel.grid.major = element_line(color = "gray80", linetype = "dashed"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#fdfdfd", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.title = element_blank()
) +
geom_vline(xintercept = max(time(fitted(fit_arma21))), linetype = "dotted", color = "red") +
annotate(
"text",
x = max(time(fitted(fit_arma21))) + 0.5,
y = Inf,
label = "Forecast Begins â†’",
vjust = 2,
hjust = 0,
color = "red",
fontface = "italic",
size = 4
)
library(ggplot2)
library(forecast)
library(scales)
# Forecast next 24 months for ARMA(2,1)
forecast_arma11 <- forecast(fit_arma11, h = 24)
# Prepare CI ribbon data for ARMA(2,1)
df_ci <- data.frame(
Time = as.numeric(time(forecast_arma11$mean)),
Lo95 = forecast_arma11$lower[, 2],
Hi95 = forecast_arma11$upper[, 2]
)
# Plot
autoplot(forecast_arma11, series = "ARMA(1,1)", PI = FALSE) +
autolayer(fitted(fit_arma11), series = "Actual", color = "blue") +
geom_ribbon(
data = df_ci,
aes(x = Time, ymin = Lo95, ymax = Hi95),
fill = "yellow", alpha = 0.2, inherit.aes = FALSE
) +
ggtitle("ðŸ“ˆ Forecast â€” ARMA(1,1), Next 24 Months") +
xlab("Year") +
ylab("Differenced Time Series") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
scale_y_continuous(labels = number_format(accuracy = 0.01)) +
scale_color_manual(values = c("Actual" = "blue", "ARMA(1,1)" = "#E4572E")) +
theme_minimal(base_family = "Helvetica", base_size = 14) +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 18),
axis.title = element_text(face = "bold"),
axis.text = element_text(color = "gray20"),
panel.grid.major = element_line(color = "gray80", linetype = "dashed"),
panel.grid.minor = element_blank(),
plot.background = element_rect(fill = "#fdfdfd", color = NA),
panel.background = element_rect(fill = "#ffffff", color = NA),
legend.title = element_blank()
) +
geom_vline(xintercept = max(time(fitted(fit_arma11))), linetype = "dotted", color = "red") +
annotate(
"text",
x = max(time(fitted(fit_arma11))) + 0.5,
y = Inf,
label = "Forecast Begins â†’",
vjust = 2,
hjust = 0,
color = "red",
fontface = "italic",
size = 4
)
# Load necessary libraries
library(forecast)
library(ggplot2)
library(scales)
library(ggfortify)
# Forecasts
forecast_arma21 <- forecast(fit_arma21, h = 24)
forecast_arma11 <- forecast(fit_arma11, h = 24)
# Create a common forecast date sequence
forecast_dates <- seq(max(ts_dates) + 1, by = "month", length.out = 24)
# Convert to data frame manually to avoid ts issues
forecast_df_21 <- data.frame(
Date = forecast_dates,
Forecast = as.numeric(forecast_arma21$mean),
Lo80 = as.numeric(forecast_arma21$lower[,1]),
Hi80 = as.numeric(forecast_arma21$upper[,1]),
Lo95 = as.numeric(forecast_arma21$lower[,2]),
Hi95 = as.numeric(forecast_arma21$upper[,2]),
Model = "ARMA(2,1)"
)
forecast_df_11 <- data.frame(
Date = forecast_dates,
Forecast = as.numeric(forecast_arma11$mean),
Lo80 = as.numeric(forecast_arma11$lower[,1]),
Hi80 = as.numeric(forecast_arma11$upper[,1]),
Lo95 = as.numeric(forecast_arma11$lower[,2]),
Hi95 = as.numeric(forecast_arma11$upper[,2]),
Model = "ARMA(1,1)"
)
# Now they can safely be combined
combined_forecast_df <- rbind(forecast_df_21, forecast_df_11)
# Optional: outlier region
outlier_zone <- data.frame(
xmin = as.Date("2015-01-01"),
xmax = max(ts_dates),
ymin = -Inf, ymax = Inf
)
# Plot
ggplot() +
# Outlier region
geom_rect(data = outlier_zone, aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax),
fill = "lightpink", alpha = 0.3) +
# Historical data
geom_line(data = observed_df, aes(x = Date, y = Value), color = "#1f77b4", size = 1) +
# Forecast intervals (95%)
geom_ribbon(data = combined_forecast_df, aes(x = Date, ymin = Lo95, ymax = Hi95, fill = Model),
alpha = 0.25) +
# Forecast lines
geom_line(data = combined_forecast_df, aes(x = Date, y = Forecast, color = Model), size = 1) +
# Titles and theme
labs(title = "Forecast Comparison: ARMA(2,1) vs ARMA(1,1)",
subtitle = "With 80% and 95% Confidence Intervals and Outlier Region (post-2015)",
x = "Date", y = "Differenced Series") +
scale_x_date(limits = as.Date(c("2010-01-01", max(combined_forecast_df$Date))),
date_breaks = "1 year", date_labels = "%Y") +
scale_color_manual(values = c("ARMA(2,1)" = "#e6550d", "ARMA(1,1)" = "#31a354")) +
scale_fill_manual(values = c("ARMA(2,1)" = "#c7e9b4", "ARMA(1,1)" = "#fdd0a2")) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", hjust = 0.5),
plot.subtitle = element_text(hjust = 0.5),
legend.title = element_blank(),
panel.grid.major = element_line(color = "gray80")
)
library(ggplot2)
library(forecast)
# Actual values
actual <- ts_data
# Fitted (forecasted) values
fitted_31 <- fitted(fit_arma31)
fitted_21 <- fitted(fit_arma21)
fitted_11 <- fitted(fit_arma11)
# Combine into a data frame for plotting
comparison_df <- data.frame(
Time = time(actual),
Actual = as.numeric(actual),
ARMA31 = as.numeric(fitted_31),
ARMA21 = as.numeric(fitted_21),
ARMA11 = as.numeric(fitted_11)
)
# Melt for ggplot
library(reshape2)
long_df <- melt(comparison_df, id.vars = "Time",
variable.name = "Series", value.name = "Value")
# Plot
ggplot(long_df, aes(x = Time, y = Value, color = Series)) +
geom_line(size = 0.9) +
labs(title = "Actual vs Fitted (Forecasted) Values",
y = "Differenced Value", x = "Time") +
theme_minimal() +
scale_color_manual(values = c("black", "red", "blue", "green"),
labels = c("Actual", "ARMA(3,1)", "ARMA(2,1)", "ARMA(1,1)")) +
theme(legend.title = element_blank())
library(tidyr)
library(dplyr)
library(ggplot2)
# Reshape data
comparison_long <- comparison_df %>%
pivot_longer(cols = -Time, names_to = "Series", values_to = "Value")
# Separate actual from model fits
comparison_long$Model <- ifelse(comparison_long$Series == "Actual", "Actual", gsub("ARMA", "", comparison_long$Series))
# Plot with facets per model
ggplot(comparison_long, aes(x = Time, y = Value, color = Series)) +
geom_line(size = 0.9) +
facet_wrap(~Model, scales = "free_y", ncol = 1) +
labs(title = "Actual vs Fitted (Forecasted) per Model",
x = "Time", y = "Differenced Value") +
theme_minimal() +
scale_color_manual(values = c("Actual" = "black", "ARMA31" = "red", "ARMA21" = "blue", "ARMA11" = "green")) +
theme(legend.position = "bottom", legend.title = element_blank())
residuals_df <- comparison_df %>%
mutate(
Resid_ARMA31 = Actual - ARMA31,
Resid_ARMA21 = Actual - ARMA21,
Resid_ARMA11 = Actual - ARMA11
)
residuals_long <- residuals_df %>%
select(Time, starts_with("Resid")) %>%
pivot_longer(cols = -Time, names_to = "Model", values_to = "Residual")
ggplot(residuals_long, aes(x = Time, y = Residual, color = Model)) +
geom_line() +
geom_hline(yintercept = 0, linetype = "dashed") +
labs(title = "Residuals over Time", y = "Residual", x = "Time") +
theme_minimal() +
scale_color_manual(values = c("Resid_ARMA31" = "red", "Resid_ARMA21" = "blue", "Resid_ARMA11" = "green")) +
theme(legend.title = element_blank())
# for seasonality checking
data_diff |>
gg_season(value, labels = "both") +
labs(y = "",
title = "Seasonal plot:")
data_diff |>
gg_season(diff_value, labels = "both") +
labs(y = "",
title = "Seasonal plot:")
gg_subseries(data_diff, value)
gg_subseries(data_diff, diff_value)
data_diff
#  Lag plots
data_diff |>
gg_lag(diff_value, geom = "point") +
labs(x = "lag(Beer, k)")
data_diff |> autoplot(diff_value)
data_transformed |> autoplot(boxcox_value)
data_diff24 <- data_transformed %>%
mutate(diff_value24 = difference(boxcox_value, lag = 12))
data_diff24 %>%
autoplot(diff_value24)
install.packages("urca")
library(fable)
model_fit <- data_diff %>%
model(ARIMA(diff_value))
report(model_fit)
model_ma2 <- data_diff %>%
model(MA2 = ARIMA(diff_value ~ pdq(1, 12, 1)))
report(model_ma2)
library(forecast)
model_auto <- auto.arima(data_diff$diff_value)
summary(model_auto)
library(forecast)
roots <- arima.sim(model = list(order = c(2, 0, 0), seasonal = list(order = c(0, 0, 0), period = 12)))
plot(roots)
### this is very importnat
min_val <- min(data_diff$diff_value, na.rm = TRUE)
min_val
shifted_data <- data_diff %>% mutate(log_shifted = log(diff_value - min_val + 1))
shifted_data |> autoplot(log_shifted)
shifted_data
par(mfrow = c(2, 1))  # 1 row, 2 columns
acf(na.omit(shifted_data$log_shifted), lag.max = 60)
pacf(na.omit(shifted_data$log_shifted), lag.max = 60)
data_2 <- data_diff %>%
mutate(log_like = asinh(diff_value))
par(mfrow = c(2, 1))  # 1 row, 2 columns
acf(na.omit(data_2$log_like), lag.max = 60)
pacf(na.omit(data_2$log_like), lag.max = 60)
# second difference
data_diff2 <- data_diff %>%
mutate(diff2_value = difference(diff_value))
par(mfrow = c(2, 1))  # 1 row, 2 columns
acf(na.omit(data_diff2$diff2_value), lag.max = 60)
pacf(na.omit(data_diff2$diff2_value), lag.max = 60)
acf(na.omit(data_diff$diff_value), lag.max = 60)
pacf(na.omit(data_diff$diff_value), lag.max = 60)
